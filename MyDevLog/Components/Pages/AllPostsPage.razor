@rendermode InteractiveServer
@page "/posts"
@using MyDevLog.Components.Shared
@using MyDevLog.DTO
@using MyDevLog.Data
@inject IHttpClientFactory HttpClientFactory


<div class="main-container">

    <NavBar />

    <div class="all-posts-container fade-in-up">
        <h1 class="all-posts-title">All Posts</h1>

        <input type="text"
               class="search-bar glass-effect"
               placeholder="Search posts by title or summary..."
               @oninput="OnSearchInput" />

        @if (allPosts == null)
        {
            <p><em>There are no posts yet...</em></p>
        }
        else if (!filteredPosts.Any())
        {
            <p><em>Nothing found for "@searchTerm"...</em></p>
        }
        else
        {
            <div class="posts-grid">
                @foreach (var post in filteredPosts)
                {
                    <a href="/post/@post.Id" class="post-card-link">
                        <div class="post-card glass-effect">
                            <div class="post-card-content">
                                <h4>@post.Title</h4>
                                <p>@post.Summary</p>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
    </div>
</div>



@code {
    private PostSummaryDTO[]? allPosts;
    private List<PostSummaryDTO> filteredPosts = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("WebAPI");
        try
        {
            allPosts = await client.GetFromJsonAsync<PostSummaryDTO[]>("api/posts");
            FilterPosts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            allPosts = Array.Empty<PostSummaryDTO>();
            filteredPosts = new List<PostSummaryDTO>();
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterPosts();
    }

    private void FilterPosts()
    {
        if (allPosts == null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPosts = allPosts.ToList();
        }
        else
        {
            filteredPosts = allPosts.Where(p =>
                p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Summary.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
}